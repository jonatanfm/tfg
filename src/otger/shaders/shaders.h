
// This file is generated automatically.

const char SHADER_2D_FRAGMENT[] = ""
"#version 130 compatibility\n"
"\n"
"uniform sampler2D colorMap;\n"
"uniform usampler2D depthMap;\n"
"\n"
"//uniform float zNear;\n"
"//uniform float zFar;\n"
"\n"
"const float zNear = -0.01;\n"
"const float zFar = -20.0;\n"
"\n"
"smooth in vec2 texCoord;\n"
"\n"
"void main()\n"
"{\n"
"  gl_FragColor = texture(colorMap, texCoord);\n"
"  uint z_mm = texture(depthMap, texCoord).r;\n"
"  float z_m = float(z_mm) / 1000.0;\n"
"  //float z = ((2.0*zFar*zNear)/z_m - (zFar + zNear)) / (zNear - zFar);\n"
"  float z = ((zFar + zNear) + (2.0*zFar*zNear)/z_m) / (zFar - zNear);\n"
"  gl_FragDepth = (z + 1.0) / 2.0;\n"
"}\n"
;

const char SHADER_DEFAULT_FRAGMENT[] = ""
"#version 120\n"
"\n"
"void main()\n"
"{\n"
"	gl_FragColor = gl_Color;\n"
"}\n"
;

const char SHADER_NORMALMAP_FRAGMENT[] = ""
"#version 120\n"
"\n"
"varying vec3 lightVec;\n"
"varying vec3 eyeVec;\n"
"varying vec2 texCoord;\n"
"\n"
"uniform sampler2D colorMap;\n"
"uniform sampler2D normalMap;\n"
"\n"
"uniform float invRadius;\n"
"\n"
"void main()\n"
"{\n"
"	float distSqr = dot(lightVec, lightVec);\n"
"	float att = clamp(1.0 - invRadius * sqrt(distSqr), 0.0, 1.0);\n"
"	vec3 lVec = lightVec * inversesqrt(distSqr);\n"
"\n"
"	vec3 vVec = normalize(eyeVec);\n"
"	\n"
"	vec4 base = texture2D(colorMap, texCoord);\n"
"	\n"
"	vec3 bump = normalize( texture2D(normalMap, texCoord).xyz * 2.0 - 1.0);\n"
"\n"
"	vec4 vAmbient = gl_LightSource[0].ambient * gl_FrontMaterial.ambient;\n"
"\n"
"	float diffuse = max( dot(lVec, bump), 0.0 );\n"
"	\n"
"	vec4 vDiffuse = gl_LightSource[0].diffuse * gl_FrontMaterial.diffuse * \n"
"					diffuse;	\n"
"\n"
"	float specular = pow(clamp(dot(reflect(-lVec, bump), vVec), 0.0, 1.0), \n"
"	                 gl_FrontMaterial.shininess );\n"
"	\n"
"	vec4 vSpecular = gl_LightSource[0].specular * gl_FrontMaterial.specular * \n"
"					 specular;	\n"
"	\n"
"	gl_FragColor = ( vAmbient*base + \n"
"					 vDiffuse*base + \n"
"					 vSpecular) * att;\n"
"}\n"
;

const char SHADER_2D_VERTEX[] = ""
"#version 130 compatibility\n"
"\n"
"smooth out vec2 texCoord;\n"
"\n"
"void main()\n"
"{\n"
"  gl_Position = gl_Vertex;\n"
"  texCoord = gl_MultiTexCoord0.st;\n"
"}\n"
;

const char SHADER_DEFAULT_VERTEX[] = ""
"#version 120\n"
"\n"
"void main()\n"
"{\n"
"	gl_Position    = gl_ModelViewProjectionMatrix * gl_Vertex;\n"
"	gl_FrontColor  = gl_Color;\n"
"	gl_TexCoord[0] = gl_MultiTexCoord0;\n"
"}\n"
;

const char SHADER_NORMALMAP_VERTEX[] = ""
"#version 120\n"
"\n"
"varying vec3 lightVec; \n"
"varying vec3 eyeVec;\n"
"varying vec2 texCoord;\n"
"\n"
"attribute vec3 vTangent; \n"
"\n"
"void main()\n"
"{\n"
"	gl_Position = ftransform();\n"
"	texCoord = gl_MultiTexCoord0.xy;\n"
"	\n"
"	vec3 n = normalize(gl_NormalMatrix * gl_Normal);\n"
"	vec3 t = normalize(gl_NormalMatrix * vTangent);\n"
"	vec3 b = cross(n, t);\n"
"	\n"
"	vec3 vVertex = vec3(gl_ModelViewMatrix * gl_Vertex);\n"
"	vec3 tmpVec = gl_LightSource[0].position.xyz - vVertex;\n"
"\n"
"	lightVec.x = dot(tmpVec, t);\n"
"	lightVec.y = dot(tmpVec, b);\n"
"	lightVec.z = dot(tmpVec, n);\n"
"\n"
"	tmpVec = -vVertex;\n"
"	eyeVec.x = dot(tmpVec, t);\n"
"	eyeVec.y = dot(tmpVec, b);\n"
"	eyeVec.z = dot(tmpVec, n);\n"
"}\n"
;

